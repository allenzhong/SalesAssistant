require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RecipientsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Recipient. As you add validations to Recipient, be sure to
  # adjust the attributes here as well.
  let(:user) {controller.current_user}
  let(:valid_attributes) {
    {
      name: "Test Recipient",
      phone: "022123456",
      address: "1296 Dominion",
      identity_number: "1234",
      memo: "first test",
      user: user	
    }
  }

  let(:update_valid_attributes) {
    {
      name: "Test Recipient",
      phone: "0221234567",
      address: "1296 Dominion",
      identity_number: "1234",
      memo: "first test"
    }
  }
  let(:invalid_attributes) {
    {
      name: "Test Recipient",
      phone: "1",
      address: "1296 Dominion",
      identity_number: "1234",
      memo: "first test"
    }	
  }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RecipientsController. Be sure to keep this updated too.
  #let(:valid_session) { {} }

  login_user

  describe "GET #index" do
    it "assigns all recipients as @recipients" do
      recipient = Recipient.create! valid_attributes
      get :index
      expect(assigns(:recipients)).to eq([recipient])
    end
  end

  describe "GET #show" do
    it "assigns the requested recipient as @recipient" do
      recipient = Recipient.create! valid_attributes
      get :show, params: {id: recipient.to_param}
      expect(assigns(:recipient)).to eq(recipient)
    end
  end

  describe "GET #new" do
    it "assigns a new recipient as @recipient" do
      get :new, params: {}
      expect(assigns(:recipient)).to be_a_new(Recipient)
    end
  end

  describe "GET #edit" do
    it "assigns the requested recipient as @recipient" do
      recipient = Recipient.create! valid_attributes
      get :edit, params: {id: recipient.to_param}
      expect(assigns(:recipient)).to eq(recipient)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Recipient" do
        expect {
          post :create, params: {recipient: valid_attributes}
        }.to change(Recipient, :count).by(1)
      end

      it "assigns a newly created recipient as @recipient" do
        post :create, params: {recipient: valid_attributes}
        expect(assigns(:recipient)).to be_a(Recipient)
        expect(assigns(:recipient)).to be_persisted
      end

      it "redirects to the created recipient" do
        post :create, params: {recipient: valid_attributes}
        expect(response).to redirect_to(Recipient.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved recipient as @recipient" do
        post :create, params: {recipient: invalid_attributes}
        expect(assigns(:recipient)).to be_a_new(Recipient)
      end

      it "re-renders the 'new' template" do
        post :create, params: {recipient: invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          name: "Test Recipient",
          phone: "022123456",
          address: "1296 Dominion",
          identity_number: "1234",
          memo: "first test"
        }
      }

      it "updates the requested recipient" do
        recipient = Recipient.create! valid_attributes
        put :update, params: {id: recipient.to_param, recipient: new_attributes}
        recipient.reload
        expect(recipient.phone).to eq(new_attributes[:phone])
      end

      it "assigns the requested recipient as @recipient" do
        recipient = Recipient.create! valid_attributes
        put :update, params: {id: recipient.to_param, recipient: valid_attributes}
        expect(assigns(:recipient)).to eq(recipient)
      end

      it "redirects to the recipient" do
        recipient = Recipient.create! valid_attributes
        put :update, params: {id: recipient.to_param, recipient: valid_attributes}
        expect(response).to redirect_to(recipient)
      end
    end

    context "with invalid params" do
      it "assigns the recipient as @recipient" do
        recipient = Recipient.create! valid_attributes
        put :update, params: {id: recipient.to_param, recipient: invalid_attributes}
        expect(assigns(:recipient)).to eq(recipient)
      end

      it "re-renders the 'edit' template" do
        recipient = Recipient.create! valid_attributes
        put :update, params: {id: recipient.to_param, recipient: invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested recipient" do
      recipient = Recipient.create! valid_attributes
      expect {
        delete :destroy, params: {id: recipient.to_param}
      }.to change(Recipient, :count).by(-1)
    end

    it "redirects to the recipients list" do
      recipient = Recipient.create! valid_attributes
      delete :destroy, params: {id: recipient.to_param}
      expect(response).to redirect_to(recipients_url)
    end
  end

end
